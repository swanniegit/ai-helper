name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      continue-on-error: true
      
    - name: Run type checking
      run: npm run type-check
      continue-on-error: true
      
    - name: Run tests
      run: npm test
      continue-on-error: true
      env:
        NODE_ENV: test
        # Add dummy environment variables for testing
        NEXT_PUBLIC_SUPABASE_URL: https://dummy.supabase.co
        NEXT_PUBLIC_SUPABASE_ANON_KEY: dummy-key
        SUPABASE_SERVICE_ROLE_KEY: dummy-service-key
        DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
        JWT_SECRET: dummy-jwt-secret
        OPENAI_API_KEY: dummy-openai-key
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        # Add dummy environment variables for build
        NEXT_PUBLIC_SUPABASE_URL: https://dummy.supabase.co
        NEXT_PUBLIC_SUPABASE_ANON_KEY: dummy-key
        SUPABASE_SERVICE_ROLE_KEY: dummy-service-key
        DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
        JWT_SECRET: dummy-jwt-secret
        OPENAI_API_KEY: dummy-openai-key
        CUSTOM_KEY: dummy-custom-key

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true

  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose, etc.
      continue-on-error: true

  deploy-production:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose, etc.
      continue-on-error: true 